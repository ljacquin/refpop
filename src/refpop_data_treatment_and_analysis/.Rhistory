]
miss_data_singular_model_h2_out_list_[[trait_]] <- c(
miss_data_singular_model_h2_out_list_[[trait_]],
paste0(
"h2_raw management type 3 outlier detected for ",
names(env_h2_raw_manage_type_3_out_), ": ",
as.numeric(env_h2_raw_manage_type_3_out_)
)
)
}
env_h2_raw_pheno_manage_list_ <- h2_raw_pheno_manage_types_mad_out$data_no_outliers
# get h2 outliers associated to adjusted phenotypes for type 1 & 2 managements
env_h2_adj_pheno_manage_list_ <- lapply(
env_h2_adj_pheno_manage_list_,
function(x) x[x > 0]
)
h2_adj_pheno_manage_types_mad_out <- get_outliers_list_mad(
env_h2_adj_pheno_manage_list_,
h2_mad_value_factor
)
# get outliers for h2_adj type 1 management
if (length(h2_adj_pheno_manage_types_mad_out$idx_outliers[[2]]) > 0) {
env_h2_adj_manage_type_1_out_ <- env_h2_adj_pheno_manage_list_[[2]][
h2_adj_pheno_manage_types_mad_out$idx_outliers[[2]]
]
miss_data_singular_model_h2_out_list_[[trait_]] <- c(
miss_data_singular_model_h2_out_list_[[trait_]],
paste0(
"h2_adj management type 1 outlier detected for ",
names(env_h2_adj_manage_type_1_out_), ": ",
as.numeric(env_h2_adj_manage_type_1_out_)
)
)
}
# get outliers for h2_adj type 2 management
if (length(h2_adj_pheno_manage_types_mad_out$idx_outliers[[4]]) > 0) {
env_h2_adj_manage_type_2_out_ <- env_h2_adj_pheno_manage_list_[[4]][
h2_adj_pheno_manage_types_mad_out$idx_outliers[[4]]
]
miss_data_singular_model_h2_out_list_[[trait_]] <- c(
miss_data_singular_model_h2_out_list_[[trait_]],
paste0(
"h2_adj management type 2 outlier detected for ",
names(env_h2_adj_manage_type_2_out_), ": ",
as.numeric(env_h2_adj_manage_type_2_out_)
)
)
}
# get outliers for h2_adj type 3 management
if (length(h2_adj_pheno_manage_types_mad_out$idx_outliers[[3]]) > 0) {
env_h2_adj_manage_type_3_out_ <- env_h2_adj_pheno_manage_list_[[3]][
h2_adj_pheno_manage_types_mad_out$idx_outliers[[3]]
]
miss_data_singular_model_h2_out_list_[[trait_]] <- c(
miss_data_singular_model_h2_out_list_[[trait_]],
paste0(
"h2_adj management type 3 outlier detected for ",
names(env_h2_adj_manage_type_3_out_), ": ",
as.numeric(env_h2_adj_manage_type_3_out_)
)
)
}
env_h2_adj_pheno_manage_list_ <- h2_adj_pheno_manage_types_mad_out$data_no_outliers
# detect BUFFER management, if any, and remove them
idx_manage_type_buffer <- which(str_detect(miss_data_singular_model_h2_out_list_[[trait_]],
pattern = "BUFFER"
))
if (length(idx_manage_type_buffer) > 0) {
miss_data_singular_model_h2_out_list_[[trait_]] <-
miss_data_singular_model_h2_out_list_[[trait_]][-idx_manage_type_buffer]
}
# sort list
miss_data_singular_model_h2_out_list_[[trait_]] <-
sort(miss_data_singular_model_h2_out_list_[[trait_]], decreasing = T)
# keep environments considered as non outliers for adjusted phenotypes since
# this data will be used for further analysis and prediction
env_to_keep_ <- unique(names(env_h2_adj_pheno_vect_))
df_ <- df_[which(df_$Envir %in% env_to_keep_), ]
# define rename exceptions
exception_cols <- c(
"Genotype", "Envir",
"Management", "Row", "Position",
"R", "P", trait_
)
# rename columns excluding the exception columns
new_names <- colnames(df_)
new_names[!(new_names %in% exception_cols)] <- paste0(trait_, "_", new_names[
!(new_names %in% exception_cols)
])
# replace the existing column names with the new names
colnames(df_) <- new_names
# write adjusted phenotype, from spatial heterogeneity correction, to long format
fwrite(df_, paste0(
output_spats_file_path, trait_,
"_spats_adjusted_phenotypes_long_format.csv"
))
# get and write retained environments for traits according to h2 inliers
df_trait_env_retain_ <- data.frame(
"trait" = trait_,
"env_retained_based_on_inlier_h2" =
paste0(env_to_keep_, collapse = ", ")
)
fwrite(df_trait_env_retain_, paste0(
output_spats_file_path, trait_,
"_env_retained_based_on_inlier_h2.csv"
))
# boxplots of heritabilities for adjusted and raw phenotypes accross environments
if (plot_h2_per_trait_) {
# convert to df
list_raw_adj_data <- vector("list", 8)
names(list_raw_adj_data) <- c(
"h2_raw",
"h2_raw_manage_type_1",
"h2_raw_manage_type_2",
"h2_adj_manage_type_3",
"h2_adj",
"h2_adj_manage_type_1",
"h2_adj_manage_type_2",
"h2_adj_manage_type_3"
)
list_raw_adj_data[["h2_raw"]] <- na.omit(env_h2_raw_pheno_vect_)
list_raw_adj_data[["h2_raw_manage_type_1"]] <- na.omit(env_h2_raw_pheno_manage_list_[[2]])
list_raw_adj_data[["h2_raw_manage_type_2"]] <- na.omit(env_h2_raw_pheno_manage_list_[[4]])
list_raw_adj_data[["h2_raw_manage_type_3"]] <- na.omit(env_h2_raw_pheno_manage_list_[[3]])
list_raw_adj_data[["h2_adj"]] <- na.omit(env_h2_adj_pheno_vect_)
list_raw_adj_data[["h2_adj_manage_type_1"]] <- na.omit(env_h2_adj_pheno_manage_list_[[2]])
list_raw_adj_data[["h2_adj_manage_type_2"]] <- na.omit(env_h2_adj_pheno_manage_list_[[4]])
list_raw_adj_data[["h2_adj_manage_type_3"]] <- na.omit(env_h2_raw_pheno_manage_list_[[3]])
# get all registered environments for the computed h2
all_env_names <- unique(unlist(lapply(list_raw_adj_data, names)))
# initialize a data frame for the computed h2
df_h2_raw_adj_and_manage_types_ <- data.frame(
Environment = all_env_names,
h2_raw = rep(NA, length(all_env_names)),
h2_raw_manage_type_1 = rep(NA, length(all_env_names)),
h2_raw_manage_type_2 = rep(NA, length(all_env_names)),
h2_raw_manage_type_3 = rep(NA, length(all_env_names)),
h2_adj = rep(NA, length(all_env_names)),
h2_adj_manage_type_1 = rep(NA, length(all_env_names)),
h2_adj_manage_type_2 = rep(NA, length(all_env_names)),
h2_adj_manage_type_3 = rep(NA, length(all_env_names))
)
# assign the values in the corresponding columns
for (env_name in all_env_names) {
##
if (env_name %in% names(list_raw_adj_data[["h2_raw"]])) {
df_h2_raw_adj_and_manage_types_[
df_h2_raw_adj_and_manage_types_$Environment == env_name,
"h2_raw"
] <- list_raw_adj_data[["h2_raw"]][[env_name]]
}
if (env_name %in% names(list_raw_adj_data[["h2_raw_manage_type_1"]])) {
df_h2_raw_adj_and_manage_types_[
df_h2_raw_adj_and_manage_types_$Environment == env_name,
"h2_raw_manage_type_1"
] <- list_raw_adj_data[["h2_raw_manage_type_1"]][[env_name]]
}
if (env_name %in% names(list_raw_adj_data[["h2_raw_manage_type_2"]])) {
df_h2_raw_adj_and_manage_types_[
df_h2_raw_adj_and_manage_types_$Environment == env_name,
"h2_raw_manage_type_2"
] <- list_raw_adj_data[["h2_raw_manage_type_2"]][[env_name]]
}
if (env_name %in% names(list_raw_adj_data[["h2_raw_manage_type_3"]])) {
df_h2_raw_adj_and_manage_types_[
df_h2_raw_adj_and_manage_types_$Environment == env_name,
"h2_raw_manage_type_3"
] <- list_raw_adj_data[["h2_raw_manage_type_3"]][[env_name]]
}
##
if (env_name %in% names(list_raw_adj_data[["h2_adj"]])) {
df_h2_raw_adj_and_manage_types_[
df_h2_raw_adj_and_manage_types_$Environment == env_name,
"h2_adj"
] <- list_raw_adj_data[["h2_adj"]][[env_name]]
}
if (env_name %in% names(list_raw_adj_data[["h2_adj_manage_type_1"]])) {
df_h2_raw_adj_and_manage_types_[
df_h2_raw_adj_and_manage_types_$Environment == env_name,
"h2_adj_manage_type_1"
] <- list_raw_adj_data[["h2_adj_manage_type_1"]][[env_name]]
}
if (env_name %in% names(list_raw_adj_data[["h2_adj_manage_type_2"]])) {
df_h2_raw_adj_and_manage_types_[
df_h2_raw_adj_and_manage_types_$Environment == env_name,
"h2_adj_manage_type_2"
] <- list_raw_adj_data[["h2_adj_manage_type_2"]][[env_name]]
}
if (env_name %in% names(list_raw_adj_data[["h2_adj_manage_type_3"]])) {
df_h2_raw_adj_and_manage_types_[
df_h2_raw_adj_and_manage_types_$Environment == env_name,
"h2_adj_manage_type_3"
] <- list_raw_adj_data[["h2_adj_manage_type_3"]][[env_name]]
}
}
# save computed h2 for combination of environment and management type
fwrite(df_h2_raw_adj_and_manage_types_,
file = paste0(
output_h2_file_path,
trait_,
"_h2_per_env_and_management.csv"
)
)
# create boxplots
boxplots_ <- plot_ly(df_h2_raw_adj_and_manage_types_, type = "box")
# initialize a counter for the colors
color_counter <- 1
# add each column as a trace on the graphic
for (col in names(df_h2_raw_adj_and_manage_types_)[-1]) {
# add legend
legend_label <- paste0(col, " (", sum(!is.na(df_h2_raw_adj_and_manage_types_[[col]])), " envir.)")
# assign color based on the counter
color_to_use <- bp_colors_[color_counter]
# increment the color counter for the next loop
color_counter <- color_counter + 1
# reset color counter if it exceeds the number of available colors
if (color_counter > length(bp_colors_)) {
color_counter <- 1
}
# add trace with legend name
boxplots_ <- add_trace(
boxplots_,
y = df_h2_raw_adj_and_manage_types_[[col]],
name = legend_label,
boxpoints = "all",
jitter = 0.3,
pointpos = -1.8,
marker = list(color = color_to_use),
fillcolor = color_to_use,
line = list(color = color_to_use),
text = paste("Environment: ", df_h2_raw_adj_and_manage_types_$Environment)
)
}
# add axes and title
boxplots_ <- layout(boxplots_,
yaxis = list(title = "Individual-location clonal mean heritability (h2)", range = c(0, 1.0)),
xaxis = list(title = ""),
title = list(
text = paste0(
"Individual-location clonal mean heritability (h2) for ", trait_,
", computed from raw and adjusted \n phenotypes obtained with SpATS, for the considered environments and management types"
),
font = list(size = 15)
),
margin = list(
l = 100, # adjust margin to create space for the title
r = 50, # adjust margin to the right
b = 100, # adjust inferior margin
t = 100 # adjust superior margin
)
)
# add hovermode
boxplots_ <- boxplots_ %>%
layout(hovermode = "closest")
# add annotations
annotations <- list(
list(
text = "&#8226; <b>h2_raw :</b> h2 computed from raw phenotypes for environments",
x = 1.2, y = 0.2,
xref = "paper", yref = "paper",
xanchor = "right", yanchor = "bottom",
showarrow = F,
font = list(size = 11)
),
list(
text = "&#8226; <b>h2_adj :</b> h2 computed from adjusted phenotypes for environments",
x = 1.2, y = 0.15,
xref = "paper", yref = "paper",
xanchor = "right", yanchor = "bottom",
showarrow = F,
font = list(size = 11)
),
list(
text = "&#8226; <b>h2_raw_manage_x :</b> h2_raw computed for environments associated to management x",
x = 1.2, y = 0.1,
xref = "paper", yref = "paper",
xanchor = "right", yanchor = "bottom",
showarrow = F,
font = list(size = 11)
),
list(
text = "&#8226; <b>h2_adj_manage_x :</b> h2_adj computed for environments associated to management x",
x = 1.2, y = 0.05,
xref = "paper", yref = "paper",
xanchor = "right", yanchor = "bottom",
showarrow = F,
font = list(size = 11)
)
)
# add annotations to layout
boxplots_ <- boxplots_ %>%
layout(annotations = annotations)
if (!identical(trait_, excluded_pseudo_trait_for_save_)) {
# save boxplots_ graphics
saveWidget(boxplots_, file = paste0(
output_pheno_graphics_path, "individual_location_clonal_mean_h2_",
trait_, ".html"
))
}
}
return(paste0(
trait_, ": ",
miss_data_singular_model_h2_out_list_[[trait_]]
))
}
# stop cluster
stopCluster(cl)
# write errors saved in miss_data_singular_model_h2_out_vect_
writeLines(miss_data_singular_model_h2_out_vect_, paste0(
pheno_outliers_results_path,
"envir_per_trait_with_miss_data_or_singular_model_or_h2_outliers.csv"
))
# reformat data of retained environments for traits according to h2 outlier eviction
file_list <- list.files(
path = output_spats_file_path,
pattern = "_env_retained_based_on_inlier_h2.csv",
full.names = T
)
# concatenate all data for these files into a single source and write the output
df_all_trait_env_retain_ <- map_df(file_list, fread)
fwrite(df_all_trait_env_retain_, paste0(
pheno_outliers_results_path,
"envir_per_trait_retained_based_on_inlier_h2_for_adj_phenotypes.csv"
))
# write new phenotype data source with retained environments
sel_env_ <- unique(str_split(df_all_trait_env_retain_[[2]], pattern = ", ")[[2]])
pheno_df_ <- pheno_df_[pheno_df_$Envir %in% sel_env_, ]
fwrite(pheno_df_, paste0(
pheno_dir_path_,
"phenotype_data.csv"
))
# remove single files for df_trait_env_retain_
file.remove(file_list)
# get pheno_df and detect attributes, e.g. number of modalities or levels for specific variables
raw_pheno_df_ <- as.data.frame(fread(raw_pheno_file_path_))
management_types <- unique(raw_pheno_df_$Management)
# get pheno_df for management type 1, 2 and 3
raw_pheno_manage_df <- raw_pheno_df_[raw_pheno_df_$Management %in% management_types[-1], ]
# enumerate the number of trees (total rows for each combination of trait, management, and year)
enumerate_tab_ <- raw_pheno_manage_df %>%
pivot_longer(
cols = starts_with("Harvest_date"):starts_with("Weight_sample"),
names_to = "Trait",
values_to = "Value"
) %>%
filter(!is.na(Value)) %>%
group_by(Trait, Management, Year) %>%
summarise(nb_trees = n(), .groups = "drop") %>%
pivot_wider(
names_from = c("Management", "Year"),
values_from = "nb_trees",
names_prefix = "Management_type_"
) %>%
rename_with(~ gsub("Management_type_", "", .))
if ( !("2_2018" %in% colnames(enumerate_tab_)) ){
enumerate_tab_ <- enumerate_tab_ %>%
add_column(
"2_2018" = 0,
.after = "1_2023"
)
}
if ( !("2_2019" %in% colnames(enumerate_tab_)) ){
enumerate_tab_ <- enumerate_tab_ %>%
add_column(
"2_2019" = 0,
.after = "2_2018"
)
}
if ( !("3_2018" %in% colnames(enumerate_tab_)) ){
enumerate_tab_ <- enumerate_tab_ %>%
add_column(
"3_2018" = 0,
.after = "2_2023"
)
}
# reformat the table to have columns for each management type and their corresponding years
enumerate_tab_ <- enumerate_tab_ %>%
pivot_longer(
cols = -Trait,
names_to = c("Management_type", "Year"),
names_sep = "_",
values_to = "nb_trees"
) %>%
pivot_wider(
names_from = c("Management_type", "Year"),
values_from = "nb_trees"
)
enumerate_tab_ <- as.data.frame(enumerate_tab_)
colnames(enumerate_tab_)[-1] <- paste0(
"Management type ",
str_replace(colnames(enumerate_tab_)[-1],
pattern = "_", replacement = " ("
),
")"
)
# replace NA values with 0 in enumerate_tab_
enumerate_tab_[is.na(enumerate_tab_)] <- 0
enumerate_tab_$Trait <- as.character(enumerate_tab_$Trait)
# convert the data into "long" format using melt
melt_tab_ <- melt(enumerate_tab_, id.vars = "Trait")
# create a color vector for each year based on the management type
colors <- c(rep("blue3", 6), rep("brown", 6), rep("darkmagenta", 6))
# create the heatmap with management labels for each group of years
p <- ggplot(melt_tab_, aes(x = variable, y = Trait, fill = value)) +
geom_tile() +
geom_text(aes(label = ifelse(!is.na(value), value, "")),
color = "black", size = 4
) +
scale_fill_gradient(
low = "white", high = "darkgreen", na.value = "white",
name = "Frequency"
) +
theme_minimal() +
labs(
title = "Number of phenotyped trees per management type and year for each trait",
x = NULL, y = NULL
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.ticks.x = element_blank(),
panel.grid = element_blank()
) +
guides(fill = guide_colorbar(
title = "Frequency",
label.position = "right",
))
# modify the X-axis colors based on the groups
p <- p + scale_x_discrete(
breaks = unique(melt_tab_$variable),
labels = unique(melt_tab_$variable),
limits = unique(melt_tab_$variable)
) +
# modify the colors of the X-axis text
theme(
axis.text.x = element_text(
color = colors, # apply the colors for each year
angle = 45,
hjust = 1
)
)
p <- grid.arrange(
p,
top = NULL,
bottom = textGrob("Management type 1: normal irrigation and normal pesticide
Management type 2: normal irrigation and reduced pesticide
Management type 3: reduced irrigation and normal pesticide",
gp = gpar(fontsize = 10, fontface = "italic")
)
)
# save plot
ggsave(
paste0(
output_pheno_graphics_path,
"number_of_phenotyped_trees_per_management_year_combination.png"
),
plot = p, width = 16, height = 8, dpi = 300
)
# enumerate the number of trees (total rows for each combination of trait, country and year)
enumerate_tab_ <- raw_pheno_manage_df %>%
pivot_longer(
cols = starts_with("Harvest_date"):starts_with("Weight_sample"),
names_to = "Trait",
values_to = "Value"
) %>%
filter(!is.na(Value)) %>%
group_by(Trait, Country_Year) %>%
summarise(nb_trees = n(), .groups = "drop") %>%
pivot_wider(
names_from = c("Country_Year"),
values_from = "nb_trees",
names_prefix = ""
)
enumerate_tab_ <- enumerate_tab_[,c('Trait', sort(colnames(enumerate_tab_)[-1]))]
# replace NA values with 0 in enumerate_tab_
enumerate_tab_[is.na(enumerate_tab_)] <- 0
enumerate_tab_$Trait <- as.character(enumerate_tab_$Trait)
# convert the data into "long" format using melt
melt_tab_ <- melt(enumerate_tab_, id.vars = "Trait")
# create the heatmap with management labels for each group of years
p <- ggplot(melt_tab_, aes(x = variable, y = Trait, fill = value)) +
geom_tile() +
geom_text(aes(label = ifelse(!is.na(value), value, "")),
color = "black", size = 4
) +
scale_fill_gradient(
low = "white", high = "blue", na.value = "white",
name = "Frequency"
) +
theme_minimal() +
labs(
title = "Number of phenotyped trees per environment",
x = NULL, y = NULL
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.ticks.x = element_blank(),
panel.grid = element_blank(),
plot.background = element_rect(fill = "gray100", color = NA),
panel.background = element_rect(fill = "gray100", color = NA)
) +
guides(fill = guide_colorbar(
title = "Frequency",
label.position = "right",
))
# save plot
ggsave(
paste0(
output_pheno_graphics_path,
"number_of_phenotyped_trees_per_environment.png"
),
plot = p, width = 16, height = 6, dpi = 300
)
